<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>AdminðŸš€</title>

  <script src="https://cdn.zingchart.com/zingchart.min.js"></script>
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Roboto+Mono&family=Roboto:wght@100;300&display=swap');

    /* slide bar */
    ::-webkit-scrollbar {
      width: 6px;
      height: 6px;
    }

    ::-webkit-scrollbar-track {
      border-radius: 10px;
    }

    body::-webkit-scrollbar-track {
      /* background-color: #6c7ebb; */
      border-radius: 0px;
    }

    .dark ::-webkit-scrollbar-track {
      /* background-color: #31313a; */
      border-radius: 0 10px 10px 0;
    }

    ::-webkit-scrollbar-thumb {


      border-radius: 20px;
    }

    :root {
      --bg-color: white;
    }

    * {
      margin: 0px;
      padding: 0px;
    }

    body {
      background: #6f36ff;
      font-family: 'Roboto Mono', monospace;
      display: flex;
      height: 100vh;
      overflow: hidden;
    }

    .First {
      width: 100px;
      background: var(--bg-color);
    }

    .border {
      border: 1px solid white;
    }

    .logo {
      display: flex;
      justify-content: center;
      align-items: center;
      background: none;
      /* color: white; */
      padding: 5px;
    }

    .logo h3 {
      background-color: var(--bg-color);
    }

    .Second {
      position: relative;

      flex-direction: column;
      width: 100%;
      /* background: red; */
      height: 100vh;

    }

    .Terminal {
      background-color: white;
      overflow: scroll;
      font-family: 'Courier New', monospace;
    }

    .grid-container {
      margin-left: 3px;
      margin-right: 3px;
      margin-top: 5px;
      height: 99%;
      width: 100%;
      display: grid;
      column-gap: 3px;
      row-gap: 3px;
      grid-template-columns: repeat(5, 1fr);
      grid-template-rows: repeat(4, 1fr);
    }

    .terminal-greeting {
      background: white;
      padding-top: 5px;
      padding-left: 10px;
      font-family: 'Roboto Mono', monospace;
      border-radius: 10px;
      color: #6f36ff;
    }

    .logs {
      margin-top: 15px;
      margin-left: 12px;
    }

    /* drag logs */
    .wrapper header.active {
      cursor: move;
      user-select: none;
    }

    .terminal-greeting .wrapper-class {
      display: flex;
      justify-content: space-between;
    }

    /* ----------------------------- */
    .buttonUpload {
      background: #6f36ff;
      width: 110px;
      height: 40px;
      color: white;
      border: 1px solid white;
      border-radius: 5px;
      font-size: 16px;
    }

    .chooseFile {
      height: 50px;
      font-size: 16px;

    }

    .updateESP {
      text-align: center;
    }

    .updateButton {
      background: #3259f4;
      width: 110px;
      height: 40px;
      color: white;
      border: 1px solid white;
      border-radius: 5px;
      font-size: 16px;
    }

    .deleteButton {
      background: #ed7524;
      width: 110px;
      height: 40px;
      color: white;
      border: 1px solid white;
      border-radius: 5px;
      font-size: 16px;
    }

    /* ---------------------------- */
    #myChart {
      height: 100%;
      width: 100%;
      min-height: 150px;
    }

    .zc-ref {
      display: none;
    }

    /* ----------------------------- */
    .item {
      background: white;
      display: flex;
      justify-content: center;
      align-items: center;
    }

    .item1 {
      grid-column-start: 3;
      grid-column-end: 6;
      grid-row-start: 1;
      grid-row-end: 3;
    }

    .item2 {
      grid-column-start: 1;
      grid-column-end: 3;
      grid-row-start: 1;
      grid-row-end: 2;
      display: flex;
      justify-content: center;
      align-items: center;
    }

    .item3 {
      grid-column-start: 1;
      grid-column-end: 3;
      grid-row-start: 4;
      grid-row-end: 5;
    }

    .item4 {
      grid-column-start: 3;
      grid-column-end: 6;
      grid-row-start: 4;
      grid-row-end: 5;
    }
  </style>
<style>
  /* Modal Header */
.modal-header {
  padding: 2px 16px;
  background-color: #3259f4;
  color: white;
}
.modal-header h3{
  margin: 10px;
  font-weight: normal;
}

/* Modal Body */
.modal-body {
  padding: 2px 16px;

}

/* Modal Footer */
.modal-footer {
  padding: 2px 16px;
  background-color: #3259f4;
  color: white;
  display: flex;
  justify-content: space-between;
}
/* Modal Content */
.modal-content {
  position: absolute;
  background-color: #fefefe;
  margin-left: 20%;
  padding: 0;
  /* border: 1px solid #888; */
  width: 500px;
  /* height: 300px; */

  box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);
  animation: animatetop 0.9s ease-in;
}
/* Add Animation */
@keyframes animatetop {
  from {top: -300px; opacity: 0}
  to {top: 0; opacity: 1}
}

/* The Close Button */
.close {
  color: #aaa;
  float: right;
  font-size: 28px;
  font-weight: bold;
}
.close:hover,
.close:focus {
  color: black;
  text-decoration: none;
  cursor: pointer;
}
</style>

<style>
  .updateForm{
    display: flex;
    flex-direction: column;
    margin-top: 10px;
    margin-bottom: 10px;
  }
  .updateForm input{
   font-size: 20px;
  }
</style>


</head>

<body>

  <div class="First">
    <div class="logo">
      <h3>IoTðŸ§·</h3>
    </div>
  </div>

  <div class="Second ">
    <div class="grid-container">
      <div class="item ">
        <div class="updateESP" >
          Update all the ESP
          <br>
          <button type="button" class="updateButton" id="updateESP" >Update</button>
        </div>
        <!-- Modal content -->
        <div class="modal-content" id="updateModal" >
          <div class="modal-header" >
            <span class="close">&times;</span>
            <h3>Update</h3>
          </div>
          <div class="modal-body">
            
            <form action="post" accept="/update" class="updateForm">
              <label for="updatename">User ID </label>
              <input type="text " id="updatename" name="updatename" >
              
              <label for="updatepassword">Password </label>
              <input type="password" id="updatepassword" name="updatepassword" >
            </form>
          </div>
          <div class="modal-footer" >
            <h3></h3>
            <button type="button" class="updateButton " style=" margin:5px;background-color: #262781; border-color: #3259f4;">Submit</button>
          </div>
        </div>
      </div>
      <div class="item">

        <!-- add a modal here -->
        <div class="updateESP">
          Delete a bin File
          <br>
          <button type="button" class="deleteButton" id="deleteESP">Delete</button>
        </div>
        <!-- Modal content -->
        <div class="modal-content" id="deleteModal" style="margin-left:-20%;">
          <div class="modal-header" style="background-color: #ed7524;">
            <span class="close">&times;</span>
            <h3>Update</h3>
          </div>
          <div class="modal-body">
            <form action="post" accept="/delete" class="updateForm">
              <label for="deletename">User ID </label>
              <input type="text " id="deletename" name="updatename" >
              
              <label for="deletepassword">Password </label>
              <input type="password" id="deletepassword" name="updatepassword" >
            </form>
          </div>
          <div class="modal-footer" style="background-color: #ed7524;">
            <h3></h3>
            <button type="button" class="updateButton " style=" margin:5px;background-color: #ce5f14; border-color: #ed7524;">Submit</button>
          </div>
        </div>
      </div>

      <div class="item">A</div>
      <div class="item">B</div>

      <!-- chart  -->
      <div class="item  item1 ">
      </div>
      <div class="item item2">
        <div>
          Upload bin File
          <br>
          <input type="file" id="fileInput" name="file" class="chooseFile " />
          <button type="button" id="uploadButton" class="buttonUpload">Upload</button>
        </div>
      </div>
      <div class=" item3" style="background:white;">
        <div id="Terminal" class="Terminal">
          <header class="terminal-greeting">
            <div class="wrapper-class">
              <p>Logs</p>
            </div>
            <hr>
          </header>
          <div class="logs">
            hello my name is Partha
          </div>
        </div>
      </div>
      <div class="item item4"></div>

      <div class="item">
        <div id='myChart'>
          Speed
        </div>
      </div>
      <div class="item">
        C
      </div>

      <div class="item">F</div>
      <!-- <div class="item"></div> -->
    </div>

  </div>




  <!-- //Uploading the file -->
  <script>
    document.getElementById("uploadButton").onclick = () => {
      //File system code
      let fileElement = document.getElementById('fileInput')
      // check if user had selected a file
      if (fileElement.files.length === 0) { alert('please choose a file'); return }
      let file = fileElement.files[0]
      const form = new FormData();
      form.append('file', file);
      //put request for file uploading
      fetch('/upload', {
        method: 'PUT',
        body: form
      })
        .then((response) => response.json())
        .then((result) => {
          alert("File Uploaded Successfully!")
        })
        .catch((error) => {
          alert("File not Uploaded!")
        });
    }
  </script>

<!-- // Get the modal -->
<script>
 
const modal = document.getElementById('updateModal');
const btn = document.getElementById('updateESP');
const span = document.getElementsByClassName("close")[0];
modal.style.display = "none";

btn.onclick = function() {
  modal.style.display = "block";
}
span.onclick = function() {
  modal.style.display = "none";
}
window.onclick = function(event) {
  if (event.target == modal) {
    modal.style.display = "none";
  }
}
const modal2 = document.getElementById('deleteModal');
const btn2 = document.getElementById('deleteESP');
const span2 = document.getElementsByClassName("close")[1];
modal2.style.display = "none";

btn2.onclick = function() {
  modal2.style.display = "block";
}
span2.onclick = function() {
  modal2.style.display = "none";
}
window.onclick = function(event) {
  if (event.target == modal) {
    modal2.style.display = "none";
  }
}
</script>

<script>

// const updateESP=document.getElementById('updateESP').onclick=()=>{
//   alert("Alert ! Do You Want to Update all the microcontrollers ?")
//   modalBox()
// }
</script>







  <script>
    window.feed = function (callback) {
      var tick = {};
      tick.plot0 = Math.ceil(350 + (Math.random() * 500));
      callback(JSON.stringify(tick));
    };

    var myConfig = {
      type: "gauge",
      globals: {
        fontSize: 12
      },
      plotarea: {
        marginTop: 0
      },
      plot: {
        size: '2%',
        valueBox: {
          placement: 'center',
          text: '%v', //default
          fontSize: 15,
          rules: [{
            rule: '%v >= 700',
            text: '%v<br>EXCELLENT'
          },
          {
            rule: '%v < 700 && %v > 640',
            text: '%v<br>Good'
          },
          {
            rule: '%v < 640 && %v > 580',
            text: '%v<br>Fair'
          },
          {
            rule: '%v <  580',
            text: '%v<br>Bad'
          }
          ]
        }
      },
      tooltip: {
        borderRadius: 0
      },
      scaleR: {
        aperture: 200,
        minValue: 300,
        maxValue: 850,
        step: 50,
        center: {
          visible: false,
          size: 5
        },
        tick: {
          visible: true
        },
        item: {
          offsetR: 0,
          rules: [{
            rule: '%i == 9',
            offsetX: 15
          }]
        },
        labels: ['300', '', '', '', '', '', '580', '640', '700', '750', '800', '850'],
        ring: {
          size: 5,
          rules: [{
            rule: '%v <= 580',
            backgroundColor: '#E53935'
          },
          {
            rule: '%v > 580 && %v < 640',
            backgroundColor: '#EF5350'
          },
          {
            rule: '%v >= 640 && %v < 700',
            backgroundColor: '#FFA726'
          },
          {
            rule: '%v >= 700',
            backgroundColor: '#29B6F6'
          }
          ]
        }
      },
      refresh: {
        type: "feed",
        transport: "js",
        url: "feed()",
        interval: 3000,
        resetTimeout: 1000
      },
      series: [{
        values: [755], // starting value
        backgroundColor: 'black',
        indicator: [0.25, 3, 2, 2, 0.85],
        animation: {
          effect: 2,
          method: 1,
          sequence: 5,
          speed: 3000
        },
      }]
    };

    zingchart.render({
      id: 'myChart',
      data: myConfig,
      height: 250,
      width: '100%',
      height: '100%'
    });
  </script>
</body>

</html>